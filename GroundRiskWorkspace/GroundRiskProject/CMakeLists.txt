# -*- CMakeLists.txt generated by CodeLite IDE. Do not edit by hand -*-

cmake_minimum_required(VERSION 2.8.11)

# Project name
project(GroundRiskProject)

# This setting is useful for providing JSON file used by CodeLite for code completion
set(CMAKE_EXPORT_COMPILE_COMMANDS 1)

# Set default locations
set(CL_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../cmake-build-Debug/output)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CL_OUTPUT_DIRECTORY})

set(CONFIGURATION_NAME "Debug")

# Projects


# Top project
# Define some variables
set(PROJECT_GroundRiskProject_PATH "${CMAKE_CURRENT_LIST_DIR}")
set(WORKSPACE_PATH "${CMAKE_CURRENT_LIST_DIR}/..")



#{{{{ User Code 1
# Place your code here
#}}}}

include_directories(
    .

)


# Compiler options
execute_process(COMMAND 
    wx-config --cxxflags --unicode=yes  
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_1)
execute_process(COMMAND 
    wx-config --cxxflags --unicode=yes  
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_2)
add_definitions(${CL_VAR_1})
add_definitions(${CL_VAR_2})
add_definitions(-g)
add_definitions(-O0)
add_definitions(-std=c++17)
add_definitions(-Wall)
add_definitions(
    -D__WX__
    -D_FILE_OFFSET_BITS=64
    -DWXUSINGDLL
    -D__WXGTK__
)


# Linker options
execute_process(COMMAND 
    wx-config   --libs --unicode=yes
    OUTPUT_VARIABLE
    CL_TMP_VAR
    OUTPUT_STRIP_TRAILING_WHITESPACE)
string(STRIP ${CL_TMP_VAR} CL_VAR_3)
set(LINK_OPTIONS ${CL_VAR_3})


if(WIN32)
    # Resource options
    execute_process(COMMAND 
        wx-config --rcflags
        OUTPUT_VARIABLE
        CL_TMP_VAR
        OUTPUT_STRIP_TRAILING_WHITESPACE)
    string(STRIP ${CL_TMP_VAR} CL_VAR_4)
    set(RC_OPTIONS ${CL_VAR_4})
endif(WIN32)

# Library path
link_directories(
    .
)

# Define the CXX sources
set ( CXX_SRCS
    ${CMAKE_CURRENT_LIST_DIR}/AStarSearchInstance.cpp
    ${CMAKE_CURRENT_LIST_DIR}/main.cpp
    ${CMAKE_CURRENT_LIST_DIR}/MapPanel.cpp
    ${CMAKE_CURRENT_LIST_DIR}/Neighbours.cpp
    ${CMAKE_CURRENT_LIST_DIR}/BicriteriaDijkstraInstance.cpp
    ${CMAKE_CURRENT_LIST_DIR}/RiskMap.cpp
    ${CMAKE_CURRENT_LIST_DIR}/gui.cpp
    ${CMAKE_CURRENT_LIST_DIR}/ParallelogramPixels.cpp
)

if(WIN32)
    # Define the resource files
    set ( RC_SRCS
        ${CMAKE_CURRENT_LIST_DIR}/win_resources.rc
    )
endif(WIN32)

set_source_files_properties(
    ${CXX_SRCS} PROPERTIES COMPILE_FLAGS 
    " -g -O0 -std=c++17 -Wall -pthread")

if(WIN32)
    enable_language(RC)
    set(CMAKE_RC_COMPILE_OBJECT
        "<CMAKE_RC_COMPILER> ${RC_OPTIONS} -O coff -i <SOURCE> -o <OBJECT>")
endif(WIN32)



#{{{{ User Code 2
# Place your code here
#}}}}

add_executable(GroundRiskProject ${RC_SRCS} ${CXX_SRCS} ${C_SRCS})
target_link_libraries(GroundRiskProject ${LINK_OPTIONS})


# Adding PRE_BUILD commands
add_custom_command(
    TARGET GroundRiskProject
    PRE_BUILD
    COMMAND )


# Adding POST_BUILD commands
add_custom_command(
    TARGET GroundRiskProject
    POST_BUILD
    COMMAND COMMAND ${CMAKE_COMMAND} -E copy_directory ${CMAKE_CURRENT_SOURCE_DIR}/data $<TARGET_FILE_DIR:${PROJECT_NAME}>/data)



#{{{{ User Code 3
# Place your code here
#}}}}

